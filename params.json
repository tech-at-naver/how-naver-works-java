{"name":"네이버를 만든 기술, 읽으면서 배운다 - 자바편","tagline":"TECH@NAVER","body":"# 예제 코드\r\n## 1부 자바의 API 이해하기\r\n\r\n### 01 자바의 날짜와 시간 API\r\n\r\n예제 코드 관련 GitHub 페이지\r\n\r\n- GitHub 페이지: https://github.com/benelog/java-date-time\r\n- ZIP 형식으로 다운로드: https://github.com/benelog/java-date-time/archive/master.zip\r\n\r\n예제별 GitHub 페이지\r\n\r\n- [TimeZoneChangePoint.java](https://github.com/benelog/java-date-time/blob/master/jdk7-date-time/src/main/java/com/nbp/weblab/date/TimeZoneChangePoint.java)\r\n- [OldJdkDateTest.java](https://github.com/benelog/java-date-time/blob/master/jdk7-date-time/src/test/java/com/nbp/weblab/date/OldJdkDateTest.java)\r\n- [JodaTimeTest.java](https://github.com/benelog/java-date-time/blob/master/jdk7-date-time/src/test/java/com/nbp/weblab/date/JodaTimeTest.java)\r\n- [Jsr310BackportTest.java](https://github.com/benelog/java-date-time/blob/master/jdk7-date-time/src/test/java/com/nbp/weblab/date/Jsr310BackportTest.java)\r\n- [Jsr310Test.java](https://github.com/benelog/java-date-time/blob/master/jdk8-date-time/src/test/java/com/nbp/weblab/date/Jsr310Test.java)\r\n\r\n\r\n### 03 자바에서 외부 프로세스를 실행할 때\r\n\r\nJetty와 Commons Exec로 만든 전용 데몬\r\n\r\n- GitHub 페이지: https://github.com/benelog/shell-proxy\r\n- ZIP 형식으로 다운로드: https://github.com/benelog/shell-proxy/archive/master.zip\r\n\r\n### 04 람다가 이끌어 갈 모던 자바\r\n\r\n예제 코드 관련 GitHub 페이지\r\n\r\n- GitHub 페이지: https://github.com/benelog/lambda-resort\r\n- ZIP 형식으로 다운로드: https://github.com/benelog/lambda-resort/archive/master.zip\r\n\r\n예제별 GitHub 페이지\r\n\r\n1. [예제 4-1 Guest 객체의 속성(Guest.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/domain/Guest.java)\r\n2. [예제 4-2 GuestRepository 인터페이스(GuestRepository.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/repository/GuestRepository.java)\r\n3. [예제 4-3 ResortService 인터페이스(ResortService.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/ResortService.java)\r\n4. [예제 4-4 클래식 자바로 구현한 ResortService 인터페이스의 구현체(ClassicJavaResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/ClassicJavaResort.java)\r\n5. [예제 4-5 Guava를 활용한 ResortService 인터페이스의 구현체(GuavaResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/GuavaResort.java)\r\n6. [예제 4-6 TotallyLazy를 활용한 ResortService 인터페이스의 구현체(TotallyLazyResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/TotallyLazyResort.java)\r\n7. [예제 4-7 GS Collections를 활용한 ResortService 인터페이스의 구현체(GsCollectionsResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/GsCollectionsResort.java)\r\n8. [예제 4-8 Bolts를 활용한 ResortService 인터페이스의 구현체(BoltsResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/BoltsResort.java)\r\n9. [예제 4-9 op4j를 활용한 ResortService 인터페이스의 구현체(Op4JResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/Op4JResort.java)\r\n10. [예제 4-10 lambdaj를 활용한 ResortService 인터페이스의 구현체(LambdaJResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/LambdaJResort.java)\r\n11. [예제 4-12 Functional Java를 활용한 ResortService 인터페이스의 구현체(FunctionalJavaResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/FunctionalJavaResort.java)\r\n12. [예제 4-13 Groovy를 활용한 ResortService 인터페이스의 구현체(GroovyResort.groovy)](https://github.com/benelog/lambda-resort/blob/master/src/main/groovy/com/naver/helloworld/resort/service/GroovyResort.groovy)\r\n13. [예제 4-14 Groovy의 it 키워드 활용(GroovyAdvancedResort.groovy)](https://github.com/benelog/lambda-resort/blob/master/src/main/groovy/com/naver/helloworld/resort/service/GroovyAdvancedResort.groovy)\r\n14. [예제 4-15 Scala를 활용한 ResortService 인터페이스의 구현체(ScalaResort.scala)](https://github.com/benelog/lambda-resort/blob/master/src/main/scala/com/naver/helloworld/resort/service/ScalaResort.scala)\r\n15. [예제 4-16 Scala의 '_' 기호 이용(ScalaAdvancedResort.scala)](https://github.com/benelog/lambda-resort/blob/master/src/main/scala/com/naver/helloworld/resort/service/ScalaAdvancedResort.scala)\r\n16. [예제 4-17 Kotlin을 활용한 ResortService 인터페이스의 구현체(KotlinResort.kt)](https://github.com/benelog/lambda-resort/blob/master/src/main/kotlin/com/naver/helloworld/resort/service/KotlinResort.kt)\r\n17. [예제 4-18 Kotlin의 it 키워드 활용(KotlinAdvancedResort.kt)](https://github.com/benelog/lambda-resort/blob/master/src/main/kotlin/com/naver/helloworld/resort/service/KotlinAdvancedResort.kt)\r\n18. [예제 4-19 Xtend를 활용한 ResortService 인터페이스의 구현체(XtendResort.xtend)](https://github.com/benelog/lambda-resort/blob/master/src/main/xtend/com/naver/helloworld/resort/service/XtendResort.xtend)\r\n19. [예제 4-20 Xtend에서 함수 파라미터를 생략한 익명 함수 정의(XtendAdvancedResort.xtend)](https://github.com/benelog/lambda-resort/blob/master/src/main/xtend/com/naver/helloworld/resort/service/XtendAdvancedResort.xtend)\r\n20. [예제 4-21 Ceylon을 활용한 ResortService 인터페이스의 구현체(resort.ceylon)](https://github.com/benelog/lambda-resort/blob/master/src/main/ceylon/com/naver/helloworld/resort/service/resort.ceylon)\r\n21. [예제 4-22 람다를 활용한 ResortService 인터페이스의 구현체(ModernJavaResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/ModernJavaResort.java)\r\n22. [예제 4-23 메서드 레퍼런스를 이용한 구현(ModernJavaAdvancedResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/ModernJavaAdvancedResort.java)\r\n23. [예제 4-25 익명 함수의 인터페이스 확인(ModernJavaBreak2Resort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/ModernJavaBreak2Resort.java)\r\n24. [예제 4-26 함수 인터페이스 활용 사례(FunctionParameterExam.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/basiclambda/FunctionParameterExam.java)\r\n25. [예제 4-28 직접 정의한 인터페이스를 람다 표현식으로 할당(CustomFunctionReference.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/basiclambda/CustomFunctionReference.java)\r\n26. [예제 4-29 익명 클래스와 람다에서 this의 차이(ThisDifference.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/basiclambda/ThisDifference.java)\r\n27. [예제 4-30 간단한 람다 활용 예제(SimpleLambda.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/basiclambda/SimpleLambda.java)\r\n28. [예제 4-31 익명 클래스를 활용한 비동기 서블릿(ClassicAsyncServlet.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/web/ClassicAsyncServlet.java)\r\n29. [예제 4-32 람다를 활용한 비동기 서블릿(ModernAsyncServlet.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/web/ModernAsyncServlet.java)\r\n30. [예제 4-33 익명 클래스로 RowMapper 선언(ClassicJdbcRepository.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/repository/ClassicJdbcRepository.java)\r\n31. [예제 4-34 람다 표현식을 이용한 RowMapper 선언(ModernJdbcRepository.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/repository/ModernJdbcRepository.java)\r\n32. [예제 4-36 익명 클래스로 안드로이드 이벤트 처리 메서드 지정(ClassicFragment.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/android/ClassicFragment.java)\r\n33. [예제 4-37 람다 표현식을 이용한 안드로이드 이벤트 처리 메서드 지정(ModernFragment.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/android/ModernFragment.java)\r\n34. [예제 4-38 Lambda Behave를 이용한 ResortService 테스트(ResortServiceSpec.java)](https://github.com/benelog/lambda-resort/blob/master/src/test/java/com/naver/helloworld/resort/service/ResortServiceSpec.java)\r\n35. [예제 4-39 Jinq를 활용한 ResortService 인터페이스의 구현체(JinqResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/JinqResort.java)\r\n36. [예제 4-40 Spark를 이용한 웹 요청 처리(SparkServer.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/web/SparkServer.java)\r\n37. [예제 4-41 Spark와 Spring Boot를 활용한 ResortService 구현 클래스 연동(ResortServer.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/ResortServer.java)\r\n38. [JEDI 활용 예제(JediResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/JediResort.java)\r\n39. [Commons Collections 활용 예제(CommonsCollectionsResort.java)](https://github.com/benelog/lambda-resort/blob/master/src/main/java/com/naver/helloworld/resort/service/CommonsCollectionsResort.java)\r\n\r\n# 관련 자료\r\n\r\n## 1부 자바의 API 이해하기\r\n\r\n### 01 자바의 날짜와 시간 API\r\n1. JUnit, http://junit.org\r\n2. \"Fest Assertions 2.0 documentation\", https://github.com/alexruiz/fest-assert-2.x/wiki\r\n3. \"Class GregorianCalendar\", http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html\r\n4. 서머타임' 내년 4월 부활?\", 머니투데이, 2009. 7. 28., http://www.mt.co.kr/view/mtview.php?type=1&no=2009072816501760557&outlink=1\r\n5. Java SE Platform Support Team, \"Timezone Updater Tool\", http://www.oracle.com/technetwork/java/javase/tzupdater-readme-136440.html\r\n6. Java SE Platform Support Team, \"Timezone Data Versions in the JRE Software\", http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html\r\n7. 위키백과,\"한국 표준시\", http://ko.wikipedia.org/wiki/한국_표준시\r\n8. \"내일부터 서머타임... 새벽2시를 3시로\", 매일경제, 1988. 5. 7., http://newslibrary.naver.com/viewer/index.nhn?articleId=1988050700099215012&editNo=1&publishDate=1988-05-07&officeId=00009&pageNo=15&printNo=6822&publishType=00020&from=news\r\n9. \"시간대 DB에서 우리나라 시간의 오류\", http://blog.benelog.net/3120317\r\n10. \"[JDK-8064560] (tz) Support tzdata2014j\", https://bugs.openjdk.java.net/browse/JDK-8064560\r\n11. \"조명철, 한국표준시 우리 고유 시간으로 변경 추진\", 연합뉴스, 2013. 11. 21., http://www.yonhapnews.co.kr/bulletin/2013/11/21/0200000000AKR20131121169700001.HTML\r\n12. \"전문가들 시간 미세조정 '윤초' 폐지 논쟁 지속\", 연합뉴스, 2013. 09. 21., http://www.yonhapnews.co.kr/bulletin/2013/09/21/0200000000AKR20130921027300009.HTML\r\n13. reddit, http://www.reddit.com\r\n14. Foursquare, https://www.foursquare.com\r\n15. Yelp, http://www.yelp.com\r\n16. LinkedIn, https://www.linkedin.com\r\n17. Cassandra, http://cassandra.apache.org\r\n18. Hadoop, http://hadoop.apache.org\r\n19. Elasticsearch, http://www.elasticsearch.org\r\n20. \"윤초 때문에… 포스퀘어-링크드인 장애\", 지디넷, 2012. 7. 2., http://www.zdnet.co.kr/news/news_view.asp?artice_id=20120702094444\r\n21. \"1초가 하둡을 죽였다.\", http://agbird.egloos.com/5654329\r\n22. Christopher Pascoe,\"Time, technology and leaping seconds\", http://googleblog.blogspot.kr/2011/09/time-technology-and-leaping-seconds.html\r\n23. \"Class Date\", http://docs.oracle.com/javase/7/docs/api/java/util/Date.html\r\n24. Stack Overflow, \"Do Java system milliseconds take account of leap seconds?\", http://stackoverflow.com/questions/16022346/do-java-systemmilliseconds-take-account-of-leap-seconds\r\n25. Martin Folwer,\"ValueObject\", http://martinfowler.com/bliki/ValueObject.html\r\n26. Sun Microsystems,\"Core J2EE Patterns - Transfer Object\", http://www.oracle.com/technetwork/java/transferobject-139757.html\r\n27. Martin Folwer,\"Data Transfer Object\", http://martinfowler.com/eaaCatalog/dataTransferObject.html\r\n28. \"EI: May expose internal representation by returning reference to mutable object (EI_EXPOSE_REP)\", http://findbugs.sourceforge.net/bugDescriptions.html#EI_EXPOSE_REP\r\n29. \"EI2: May expose internal representation by incorporating reference to mutable object (EI_EXPOSE_REP2)\", http://findbugs.sourceforge.net/bugDescriptions.html#EI_EXPOSE_REP2\r\n30. Commons Lang, http://commons.apache.org/proper/commons-lang\r\n31. \"Class DateUtils\", http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/time/DateUtils.html\r\n32. Joda-Time, http://www.joda.org/joda-time\r\n33. Time and Money Code Library: http://timeandmoney.sourceforge.net41\r\n34. CalendarDate, http://calendardate.sourceforge.net\r\n35. date4j, http://www.date4j.net\r\n36. 정상혁, \"Effective & Agile Java Generics\", http://blog.benelog.net/viewer/2173103\r\n37. Joshua Bloch, \"How to Design a Good API & Why it Matters\", http://www.infoq.com/presentations/effective-api-design\r\n38. \"Spring 3 Type Conversion and Validation\", http://spring.io/blog/2009/11/17/spring-3-type-conversion-and-validation\r\n39. Hibernate, http://hibernate.org\r\n40. Joda-Time-Hibernate, http://www.joda.org/joda-time-hibernate\r\n41. JSR-310, https://java.net/projects/jsr-310\r\n42. \"[SPR-9641] Support Date and Time API (JSR-310)\", https://jira.springsource.org/browse/SPR-9641\r\n\r\n### 02 자바의 HashMap은 어떻게 작동하는가?\r\n1. Wikipedia, \"Birthday problem\", http://en.wikipedia.org/wiki/Birthday_problem\r\n\r\n### 03 자바에서 외부 프로세스를 실행할 때\r\n1. \"Class Process\", https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html\r\n2. Michael C. Daconta, \"When Runtime.exec() won't\", http://www.javaworld.com/article/2071275/core-java/when-runtime-exec---won-t.html\r\n3. anders pearson, \"Subprocess Hanging: PIPE is your enemy\", http://thraxil.org/users/anders/posts/2008/03/13/Subprocess-Hanging-PIPE-is-your-enemy\r\n4. ProcessWrapper.java:http://jppf-project.cvs.sourceforge.net/viewvc/jppf-project/node/src/java/org/jppf/process/ProcessWrapper.java?revision=1.2&view=markup\r\n5. Alvin Alexander, \"Java exec - execute system processes with Java ProcessBuilder and Process (part 1)\", http://alvinalexander.com/java/java-exec-processbuilder-process-1\r\n6. Alvin Alexander, \"Java exec - execute system processes with Java ProcessBuilder and Process (part 3)\", http://alvinalexander.com/java/java-exec-processbuilder-process-3\r\n7. ant/PumpStreamHandler.java, https://github.com/apache/ant/blob/master/src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java\r\n8. commons-exec/PumpStreamHandler.java, https://github.com/apache/commons-exec/blob/trunk/src/main/java/org/apache/commons/exec/PumpStreamHandler.java\r\n9. ExecMojo.java, http://svn.codehaus.org/mojo/trunk/mojo/exec-maven-plugin/src/main/java/org/codehaus/mojo/exec/ExecMojo.java\r\n10. Stack Overflow, \"Runtime.exec causes duplicate JVM to hang indefinitely until killed (Solaris 10)\", http://stackoverflow.com/questions/1160656/runtime-exec-causes-duplicate-jvm-to-hang-indefinitely-until-killed-solaris-10\r\n11. Greg Nakhimovsky, \"Minimizing Memory Usage for Creating Application Subprocesses\", http://www.oracle.com/technetwork/server-storage/solaris10/subprocess-136439.html\r\n12. 이승배, \"JVM에서 외부 프로그램을 수행할 때 무슨 일이?\", http://blog.naver.com/naverdev/120113620117\r\n13. Java Service Wrapper, http://wrapper.tanukisoftware.com\r\n14. java_posix_spawn, https://github.com/axiak/java_posix_spawn\r\n15. \"[EXEC-51] Integrate using \"java_posix_spawn\" into commons-exec\", https://issues.apache.org/jira/browse/EXEC-51\r\n16. \"OpenJDK / jdk8 / jdk8 / jdk - changeset 7875:a4b0be7341ef\", http://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/a4b0be7341ef\r\n17. \"POSIX 1003.1 - man page for vfork (posix section 3posix)\", http://www.unix.com/man-page/POSIX/3posix/vfork\r\n18. Wikipedia, \"Fork (system call)\", http://en.wikipedia.org/wiki/Fork_(system_call)\r\n19. \"vfork\", https://docs.oracle.com/cd/E23823_01/html/816-5167/vfork-2.html\r\n20. Greg Nakhimovsky, \"Minimizing Memory Usage for Creating Application Subprocesses\", http://www.oracle.com/technetwork/server-storage/solaris10/subprocess-136439.html\r\n21. \"Ubuntu Manpage: vfork - create a child process and block parent\", http://manpages.ubuntu.com/manpages/lucid/man2/vfork.2.html\r\n22. \"Bug 18006 - Please replace vfork() with fork()\", https://gcc.gnu.org/bugzilla/show_bug.cgi?id=18006\r\n23. Jenkins, http://jenkins-ci.org\r\n\r\n### 04 람다가 이끌어 갈 모던 자바\r\n1. Guava, https://github.com/google/guava\r\n2. TotallyLazy, http://totallylazy.com\r\n3. Clojure, http://clojure.org\r\n4. Scala, http://www.scala-lang.org\r\n5. Haskell, https://www.haskell.org\r\n6. F#, http://fsharp.org\r\n7. GS Collections, https://github.com/goldmansachs/gs-collections\r\n8. GS Collections Wiki, https://github.com/goldmansachs/gs-collections/wiki\r\n9. Bolts, https://bitbucket.org/stepancheg/bolts/wiki/Home\r\n10. Yandex, https://www.yandex.com\r\n11. op4j, http://www.op4j.org\r\n12. lambdaj, https://code.google.com/p/lambdaj\r\n13. Java Hamcrest, http://hamcrest.org/JavaHamcrest\r\n14. JUnit, http://junit.org\r\n15. Functional Java, http://functionaljava.org\r\n16. 이터너티, \"고차 함수(Higher-Order Function)를 이용한 설계 개선\", http://aeternum.egloos.com/2946774\r\n17. Commons Collections, http://commons.apache.org/proper/commons-collections\r\n18. Jedi, http://jedi.codehaus.org\r\n19. Trove, https://bitbucket.org/robeden/trove\r\n20. Commons Functor, http://commons.apache.org/sandbox/commons-functor\r\n21. JRuby, http://jruby.org\r\n22. Jython, http://www.jython.org\r\n23. Groovy, http://groovy.codehaus.org\r\n24. Grails, https://grails.org\r\n25. Gradle, https://www.gradle.org\r\n26. Play, https://www.playframework.com\r\n27. Akka, http://akka.io\r\n28. Kotlin, http://kotlinlang.org\r\n29. IntelliJ, https://www.jetbrains.com/idea\r\n30. JetBrains, https://www.jetbrains.com\r\n31. Xtend, http://www.eclipse.org/xtend\r\n32. Ceylon, http://ceylon-lang.org\r\n33. Hibernate, http://hibernate.org\r\n34. The Perl Review, \"Interview with Mark Jason Dominus\", http://www.theperlreview.com/Interviews/mjd-hop-20050407.html\r\n35. Codehaus Groovy Community, \"Groovy User Guide - Closures\", http://groovy.codehaus.org/Closures\r\n36. 이터너티, \"언어별 행위 매개변수 구현 방식\", http://aeternum.egloos.com/2948571\r\n37. InfoQ, \"Joshua Bloch on Closures, Resource Management, Google\", http://www.infoq.com/interviews/joshua-bloch\r\n38. InfoQ, \"Josh Bloch on Java and Programming\", http://www.infoq.com/interviews/josh-bloch-java-prog\r\n39. \"Package java.util.stream\", http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html\r\n40. Ryan Slobojan, \"Josh Bloch on Java and Programming\", http://www.infoq.com/interviews/josh-bloch-java-prog\r\n41. Wikipedia, \"Corner case\", http://en.wikipedia.org/wiki/Corner_case\r\n42. Brian Goetz, \"Lambda: A Peek Under the Hood\", http://www.infoq.com/presentations/lambda-invokedynamic\r\n43. \"[SI-8359] Use invokedynamic for lambdas\", https://issues.scala-lang.org/browse/SI-8359\r\n44. Retrolambda, https://github.com/orfjackal/retrolambda\r\n45. Scaloid, https://github.com/pocorall/scaloid\r\n46. Xtendroid, https://github.com/tobykurien/Xtendroid\r\n47. Lambda Behave, http://richardwarburton.github.io/lambda-behave\r\n48. Spock, https://code.google.com/p/spock\r\n49. 백기선, \"Spock으로 테스트하기\", http://helloworld.naver.com/helloworld/textyle/568425\r\n50. Jinq, http://www.jinq.org\r\n51. Spark, http://www.sparkjava.com\r\n52. Sinatra, http://www.sinatrarb.com\r\n53. Jetty, http://eclipse.org/jetty\r\n54. Spring Boot, http://projects.spring.io/spring-boot\r\n\r\n## 2부 문제 분석과 사례\r\n\r\n### 05 JVM 이해하기\r\n1. Tim Lindholm, Frank Yellin, \"The Java Virtual Machine Specification, Second Edition\", https://docs.oracle.com/javase/specs/jvms/se5.0/html/VMSpecTOC.doc.html\r\n2. Tim Lindholm, Frank Yellin, Gilad Bracha, Alex Buckley, \"The Java Virtual Machine Specification, Java SE 7 Edition\", https://docs.oracle.com/javase/specs/jvms/se7/jvms7.pdf\r\n3. Tim Lindholm, Frank Yellin, Gilad Bracha, Alex Buckley, \"The Java Virtual Machine Specification, Java SE 8 Edition\", https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf\r\n4. Tim Lindholm, Frank Yellin, \"The Java Virtual Machine Specification, Second Edition\", https://docs.oracle.com/javase/specs/jvms/se5.0/html/ClassFile.doc.html#1169\r\n5. Tim Lindholm, Frank Yellin, \"The Java Virtual Machine Specification, Second Edition\", https://docs.oracle.com/javase/specs/jvms/se5.0/html/Instructions.doc.html\r\n6. Tim Lindholm, Frank Yellin, \"The Java Virtual Machine Specification, Second Edition\", https://docs.oracle.com/javase/specs/jvms/se5.0/html/ClassFile.doc.html#74353\r\n\r\n### 07 자바 애플리케이션 분석을 위한 BTrace\r\n1. BTrace, http://kenai.com/projects/btrace\r\n2. BTrace: Downloads, https://kenai.com/projects/btrace/downloads/directory/releases\r\n3. DTrace, http://dtrace.org\r\n4. SolrCloud, https://cwiki.apache.org/confluence/display/solr/SolrCloud\r\n5. \"BTrace User's Guide\", https://kenai.com/projects/btrace/pages/UserGuide\r\n6. \"[BTRACE-91] Btrace 1.2.3 no longer supports Java 1.6\", https://kenai.com/jira/browse/BTRACE-91\r\n\r\n### 08 하나의 메모리 누수를 잡기까지\r\n1. Samurai, http://samuraism.jp/samurai\r\n2. IBM Pattern Modeling and Analysis Tool for Java Garbage Collector, http://www.alphaworks.ibm.com/tech/pmat\r\n3. Memory Analyzer(MAT), http://eclipse.org/mat\r\n\r\n### 09 고맙다 JVM, 사과해라 JVM 크래시\r\n1. \"JDK-6896647 : card marks can be deferred too long\", http://bugs.java.com/view_bug.do?bug_id=6896647\r\n2. \"JDK-6913441 : CMS: SIGSEGV in CompactibleFreeListSpace::compact\", http://bugs.java.com/view_bug.do?bug_id=6913441\r\n3. \"Java SE 6 Update Release Notes - Changes in 1.6.0_18 (6u18)\", http://www.oracle.com/technetwork/java/javase/6u18-142093.html\r\n\r\n## 3부 가비지 컬렉션\r\n\r\n### 10 자바 가비지 컬렉션의 작동 과정\r\n1. Sun Microsystems, \"Memory Management in the Java HotSpotTM Virtual Machine\", http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf\r\n2. Tony Printezis, Paul Ciciora, \"The Garbage-First Garbage Collector\", http://www.oracle.com/technetwork/server-storage/ts-5419-159484.pdf\r\n3. Apache Lucene Core, http://lucene.apache.org/core\r\n4. \"[JDK-8024830] SEGV in org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.get\", https://bugs.openjdk.java.net/browse/JDK-8024830\r\n5. \"[LUCENE-5212] java 7u40 causes sigsegv and corrupt term vectors\", https://issues.apache.org/jira/browse/LUCENE-5212\r\n6. Elasticsearch, http://www.elasticsearch.org\r\n7. Apache HBase, http://hbase.apache.org\r\n8. \"Part #1 - Tuning Java Garbage Collection for HBase\", https://software.intel.com/en-us/blogs/2014/06/18/part-1-tuning-java-garbage-collection-for-hbase\r\n\r\n### 11 가비지 컬렉션 모니터링 방법\r\n1. VisualVM, http://visualvm.java.net\r\n\r\n### 12 가비지 컬렉션 튜닝\r\n1. Poonam-Oracle, \"Understanding CMS GC Logs\", https://blogs.oracle.com/poonam/entry/understanding_cms_gc_logs\r\n2. SlideShare, http://www.slideshare.net\r\n3. Attila Szegedi, \"Everything I Ever Learned About JVM Performance Tuning @Twitter\", http://www.slideshare.net/aszegedi/everything-i-ever-learned-about-jvm-performance-tuning-twitter\r\n\r\n## 4부 데이터베이스 연결 설정\r\n\r\n### 16 JDBC의 타임아웃 이해하기\r\n1. Commons HttpClient, http://hc.apache.org/httpclient-3.x\r\n\r\n### 17 Commons DBCP 이해하기\r\n1. Apache Commons, http://commons.apache.org\r\n2. Apache Software Foundation, \"The Tomcat JDBC Connection Pool\", http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html\r\n3. BoneCP, http://jolbox.com\r\n4. HikariCP, http://brettwooldridge.github.io/HikariCP\r\n5. \"[DBCP-330] Calling getMetaData() without closing the connection lead to a memory leak\", https://issues.apache.org/jira/browse/DBCP-330\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}